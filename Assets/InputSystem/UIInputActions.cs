//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/UIInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputActions"",
    ""maps"": [
        {
            ""name"": ""SettingUI"",
            ""id"": ""93e67c19-246e-472c-814e-9627ded8b999"",
            ""actions"": [
                {
                    ""name"": ""Pouse"",
                    ""type"": ""Button"",
                    ""id"": ""87aa2d3c-1c0e-4ae0-9ffc-2cb3abf8727b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainSelsectUp"",
                    ""type"": ""Button"",
                    ""id"": ""d4424fc3-1884-4da0-8eeb-610f1ca0551f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainSelsectDown"",
                    ""type"": ""Button"",
                    ""id"": ""e59cf797-8ed0-49b9-8920-d9f358b4b632"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainSelectLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7184306a-a337-4245-b59b-1bae771f5d63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainSelectRight"",
                    ""type"": ""Button"",
                    ""id"": ""52aa17d8-b12f-4251-9cd6-8eb925d90ef0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5bbd5e9-e40b-4b1c-b0d6-794bf20dafa4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95cac082-83cd-4acb-945f-cbd22d1b1c96"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainSelsectUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""907268b3-3db1-4d3e-8a50-b529c8096cad"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainSelsectDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90b7ba15-3356-4b5f-bfee-a96aea1d015a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainSelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fad875ba-68c6-44f5-9dab-d784c3d3bfee"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainSelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SettingUI
        m_SettingUI = asset.FindActionMap("SettingUI", throwIfNotFound: true);
        m_SettingUI_Pouse = m_SettingUI.FindAction("Pouse", throwIfNotFound: true);
        m_SettingUI_MainSelsectUp = m_SettingUI.FindAction("MainSelsectUp", throwIfNotFound: true);
        m_SettingUI_MainSelsectDown = m_SettingUI.FindAction("MainSelsectDown", throwIfNotFound: true);
        m_SettingUI_MainSelectLeft = m_SettingUI.FindAction("MainSelectLeft", throwIfNotFound: true);
        m_SettingUI_MainSelectRight = m_SettingUI.FindAction("MainSelectRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SettingUI
    private readonly InputActionMap m_SettingUI;
    private List<ISettingUIActions> m_SettingUIActionsCallbackInterfaces = new List<ISettingUIActions>();
    private readonly InputAction m_SettingUI_Pouse;
    private readonly InputAction m_SettingUI_MainSelsectUp;
    private readonly InputAction m_SettingUI_MainSelsectDown;
    private readonly InputAction m_SettingUI_MainSelectLeft;
    private readonly InputAction m_SettingUI_MainSelectRight;
    public struct SettingUIActions
    {
        private @UIInputActions m_Wrapper;
        public SettingUIActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pouse => m_Wrapper.m_SettingUI_Pouse;
        public InputAction @MainSelsectUp => m_Wrapper.m_SettingUI_MainSelsectUp;
        public InputAction @MainSelsectDown => m_Wrapper.m_SettingUI_MainSelsectDown;
        public InputAction @MainSelectLeft => m_Wrapper.m_SettingUI_MainSelectLeft;
        public InputAction @MainSelectRight => m_Wrapper.m_SettingUI_MainSelectRight;
        public InputActionMap Get() { return m_Wrapper.m_SettingUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingUIActions set) { return set.Get(); }
        public void AddCallbacks(ISettingUIActions instance)
        {
            if (instance == null || m_Wrapper.m_SettingUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettingUIActionsCallbackInterfaces.Add(instance);
            @Pouse.started += instance.OnPouse;
            @Pouse.performed += instance.OnPouse;
            @Pouse.canceled += instance.OnPouse;
            @MainSelsectUp.started += instance.OnMainSelsectUp;
            @MainSelsectUp.performed += instance.OnMainSelsectUp;
            @MainSelsectUp.canceled += instance.OnMainSelsectUp;
            @MainSelsectDown.started += instance.OnMainSelsectDown;
            @MainSelsectDown.performed += instance.OnMainSelsectDown;
            @MainSelsectDown.canceled += instance.OnMainSelsectDown;
            @MainSelectLeft.started += instance.OnMainSelectLeft;
            @MainSelectLeft.performed += instance.OnMainSelectLeft;
            @MainSelectLeft.canceled += instance.OnMainSelectLeft;
            @MainSelectRight.started += instance.OnMainSelectRight;
            @MainSelectRight.performed += instance.OnMainSelectRight;
            @MainSelectRight.canceled += instance.OnMainSelectRight;
        }

        private void UnregisterCallbacks(ISettingUIActions instance)
        {
            @Pouse.started -= instance.OnPouse;
            @Pouse.performed -= instance.OnPouse;
            @Pouse.canceled -= instance.OnPouse;
            @MainSelsectUp.started -= instance.OnMainSelsectUp;
            @MainSelsectUp.performed -= instance.OnMainSelsectUp;
            @MainSelsectUp.canceled -= instance.OnMainSelsectUp;
            @MainSelsectDown.started -= instance.OnMainSelsectDown;
            @MainSelsectDown.performed -= instance.OnMainSelsectDown;
            @MainSelsectDown.canceled -= instance.OnMainSelsectDown;
            @MainSelectLeft.started -= instance.OnMainSelectLeft;
            @MainSelectLeft.performed -= instance.OnMainSelectLeft;
            @MainSelectLeft.canceled -= instance.OnMainSelectLeft;
            @MainSelectRight.started -= instance.OnMainSelectRight;
            @MainSelectRight.performed -= instance.OnMainSelectRight;
            @MainSelectRight.canceled -= instance.OnMainSelectRight;
        }

        public void RemoveCallbacks(ISettingUIActions instance)
        {
            if (m_Wrapper.m_SettingUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettingUIActions instance)
        {
            foreach (var item in m_Wrapper.m_SettingUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettingUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettingUIActions @SettingUI => new SettingUIActions(this);
    public interface ISettingUIActions
    {
        void OnPouse(InputAction.CallbackContext context);
        void OnMainSelsectUp(InputAction.CallbackContext context);
        void OnMainSelsectDown(InputAction.CallbackContext context);
        void OnMainSelectLeft(InputAction.CallbackContext context);
        void OnMainSelectRight(InputAction.CallbackContext context);
    }
}
